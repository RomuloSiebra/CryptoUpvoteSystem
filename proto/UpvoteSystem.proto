syntax = "proto3";

package UpvoteSystem;

option go_package = "proto/UpvoteSystem";

message Cryptocurrency {
    string id = 1;
    string name = 2;
    int32  upvote = 3;
    int32  downvote = 4;
    string description = 5;
}

message CreateCryptoRequest{
    Cryptocurrency crypto = 1;
}

message CreateCryptoResponse{
    Cryptocurrency crypto = 1;
}

message DeleteCryptoRequest {
    string id = 1;
}

message DeleteCryptoResponse {
    bool success = 1;
}

message ReadCryptoByIDRequest{
    string id = 1;
}

message ReadCryptoByIDResponse {
    Cryptocurrency crypto = 1;
}

message ReadAllCryptoRequest{}

message ReadAllCryptoResponse {
    Cryptocurrency crypto = 1;
}


message UpdateCryptoRequest {
    Cryptocurrency crypto = 1;
}

message UpdateCryptoResponse {
    Cryptocurrency crypto = 1;
}

message UpvoteCryptoRequest{
    string id = 1;
}

message UpvoteCryptoResponse{
    Cryptocurrency crypto = 1;
}

message DownvoteCryptoRequest{
    string id = 1;
}

message DownvoteCryptoResponse {
    Cryptocurrency crypto = 1;
}

message GetVotesSumRequest {
    string id = 1;
}

message GetVotesSumResponse {
    int32 votes = 1;
}

message GetVoteSumStreamRequest {
    string id = 1;
}

message GetVoteSumStreamResponse{
    int32 votes = 1;
}
service UpvoteSystem {
    rpc CreateCrypto (CreateCryptoRequest) returns (CreateCryptoResponse);
    rpc DeleteCrypto (DeleteCryptoRequest) returns (DeleteCryptoResponse);
    rpc ReadCryptoByID (ReadCryptoByIDRequest) returns (ReadCryptoByIDResponse);
    rpc ReadAllCrypto (ReadAllCryptoRequest) returns (stream ReadAllCryptoResponse);
    rpc UpdateCrypto (UpdateCryptoRequest) returns (UpdateCryptoResponse);
    rpc UpvoteCrypto (UpvoteCryptoRequest) returns (UpvoteCryptoResponse);
    rpc DownvoteCrypto (DownvoteCryptoRequest) returns (DownvoteCryptoResponse);
    rpc GetVotesSum (GetVotesSumRequest) returns (GetVotesSumResponse);
    rpc GetVoteSumStream (GetVoteSumStreamRequest) returns (stream GetVoteSumStreamResponse);
}