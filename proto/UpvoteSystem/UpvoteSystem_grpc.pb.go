// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package UpvoteSystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteSystemClient is the client API for UpvoteSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteSystemClient interface {
	CreateCrypto(ctx context.Context, in *CreateCryptoRequest, opts ...grpc.CallOption) (*CreateCryptoResponse, error)
}

type upvoteSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteSystemClient(cc grpc.ClientConnInterface) UpvoteSystemClient {
	return &upvoteSystemClient{cc}
}

func (c *upvoteSystemClient) CreateCrypto(ctx context.Context, in *CreateCryptoRequest, opts ...grpc.CallOption) (*CreateCryptoResponse, error) {
	out := new(CreateCryptoResponse)
	err := c.cc.Invoke(ctx, "/UpvoteSystem.UpvoteSystem/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpvoteSystemServer is the server API for UpvoteSystem service.
// All implementations must embed UnimplementedUpvoteSystemServer
// for forward compatibility
type UpvoteSystemServer interface {
	CreateCrypto(context.Context, *CreateCryptoRequest) (*CreateCryptoResponse, error)
	mustEmbedUnimplementedUpvoteSystemServer()
}

// UnimplementedUpvoteSystemServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteSystemServer struct {
}

func (UnimplementedUpvoteSystemServer) CreateCrypto(context.Context, *CreateCryptoRequest) (*CreateCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedUpvoteSystemServer) mustEmbedUnimplementedUpvoteSystemServer() {}

// UnsafeUpvoteSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteSystemServer will
// result in compilation errors.
type UnsafeUpvoteSystemServer interface {
	mustEmbedUnimplementedUpvoteSystemServer()
}

func RegisterUpvoteSystemServer(s grpc.ServiceRegistrar, srv UpvoteSystemServer) {
	s.RegisterService(&UpvoteSystem_ServiceDesc, srv)
}

func _UpvoteSystem_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteSystemServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UpvoteSystem.UpvoteSystem/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteSystemServer).CreateCrypto(ctx, req.(*CreateCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpvoteSystem_ServiceDesc is the grpc.ServiceDesc for UpvoteSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UpvoteSystem.UpvoteSystem",
	HandlerType: (*UpvoteSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrypto",
			Handler:    _UpvoteSystem_CreateCrypto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/UpvoteSystem.proto",
}
